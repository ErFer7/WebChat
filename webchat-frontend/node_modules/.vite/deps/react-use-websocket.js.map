{
  "version": 3,
  "sources": ["../../react-use-websocket/src/lib/constants.ts", "../../react-use-websocket/src/lib/globals.ts", "../../react-use-websocket/src/lib/socket-io.ts", "../../react-use-websocket/src/lib/manage-subscribers.ts", "../../react-use-websocket/src/lib/util.ts", "../../react-use-websocket/src/lib/attach-listener.ts", "../../react-use-websocket/src/lib/attach-shared-listeners.ts", "../../react-use-websocket/src/lib/create-or-join.ts", "../../react-use-websocket/src/lib/get-url.ts", "../../react-use-websocket/src/lib/proxy.ts", "../../react-use-websocket/src/lib/use-websocket.ts", "../../react-use-websocket/src/lib/use-socket-io.ts", "../../react-use-websocket/src/lib/use-event-source.ts", "../../react-use-websocket/src/index.ts"],
  "sourcesContent": ["import { EventSourceEventHandlers, EventSourceOptions } from \"./types\";\n\nconst MILLISECONDS = 1;\nconst SECONDS = 1000 * MILLISECONDS;\n\nexport const DEFAULT_OPTIONS = {};\nexport const EMPTY_EVENT_HANDLERS: EventSourceEventHandlers = {};\nexport const DEFAULT_EVENT_SOURCE_OPTIONS: EventSourceOptions = {\n  withCredentials: false,\n  events: EMPTY_EVENT_HANDLERS,\n};\nexport const SOCKET_IO_PING_INTERVAL = 25 * SECONDS;\nexport const SOCKET_IO_PATH = '/socket.io/?EIO=3&transport=websocket';\nexport const SOCKET_IO_PING_CODE = '2';\nexport const DEFAULT_RECONNECT_LIMIT = 20;\nexport const DEFAULT_RECONNECT_INTERVAL_MS = 5000;\nexport const UNPARSABLE_JSON_OBJECT = {};\n\nexport enum ReadyState {\n  UNINSTANTIATED = -1,\n  CONNECTING = 0,\n  OPEN = 1,\n  CLOSING = 2,\n  CLOSED = 3,\n}\n\nconst eventSourceSupported = () => {\n  try {\n    return 'EventSource' in globalThis;\n  } catch (e) {\n    return false;\n  }\n}\n\nexport const isReactNative = typeof navigator !== 'undefined' && navigator.product === 'ReactNative';\nexport const isEventSourceSupported = !isReactNative && eventSourceSupported();\n", "import { WebSocketLike } from \"./types\";\n\nexport interface SharedWebSockets {\n  [url: string]: WebSocketLike;\n}\n\nexport const sharedWebSockets: SharedWebSockets = {};\n\nexport const resetWebSockets = (url?: string): void => {\n  if (url && sharedWebSockets.hasOwnProperty(url)) {\n    delete sharedWebSockets[url];\n  } else {\n    for (let url in sharedWebSockets){\n      if (sharedWebSockets.hasOwnProperty(url)){\n        delete sharedWebSockets[url];\n      }\n    }\n  }\n}\n", "import { SOCKET_IO_PING_INTERVAL, SOCKET_IO_PATH, SOCKET_IO_PING_CODE } from './constants';\nimport { QueryParams, SendMessage } from './types';\n\nexport const parseSocketIOUrl = (url: string) => {\n  if (url) {\n    const isSecure = /^https|wss/.test(url);\n    const strippedProtocol = url.replace(/^(https?|wss?)(:\\/\\/)?/, '');\n    const removedFinalBackSlack = strippedProtocol.replace(/\\/$/, '');\n    const protocol = isSecure ? 'wss' : 'ws';\n\n    return `${protocol}://${removedFinalBackSlack}${SOCKET_IO_PATH}`;\n  } else if (url === '') {\n    const isSecure = /^https/.test(window.location.protocol);\n    const protocol = isSecure ? 'wss' : 'ws';\n    const port = window.location.port ? `:${window.location.port}` : '';\n\n    return `${protocol}://${window.location.hostname}${port}${SOCKET_IO_PATH}`;\n  }\n\n  return url;\n};\n\nexport const appendQueryParams = (url: string, params: QueryParams = {}): string => {\n  const hasParamsRegex = /\\?([\\w]+=[\\w]+)/;\n  const alreadyHasParams = hasParamsRegex.test(url);\n\n  const stringified = `${Object.entries(params).reduce((next, [key, value]) => {\n    return next + `${key}=${value}&`;\n  }, '').slice(0, -1)}`;\n\n  return `${url}${alreadyHasParams ? '&' : '?'}${stringified}`;\n};\n\nexport const setUpSocketIOPing = (sendMessage: SendMessage, interval = SOCKET_IO_PING_INTERVAL): any => {\n  const ping = () => sendMessage(SOCKET_IO_PING_CODE);\n\n  return setInterval(ping, interval);\n};\n", "import { Subscriber } from './types';\n\nexport type Subscribers = {\n    [url: string]: Set<Subscriber>,\n}\n  \nconst subscribers: Subscribers = {};\nconst EMPTY_LIST: Subscriber[] = [];\n\nexport const getSubscribers = (url: string): Subscriber[] => {\n    if (hasSubscribers(url)) {\n        return Array.from(subscribers[url]);\n    }\n    return EMPTY_LIST;\n};\n\nexport const hasSubscribers = (url: string): boolean => {\n    return subscribers[url]?.size > 0;\n};\n\nexport const addSubscriber = (url: string, subscriber: Subscriber): void => {\n    subscribers[url] = subscribers[url] || new Set<Subscriber>();\n    subscribers[url].add(subscriber);\n};\n\nexport const removeSubscriber = (url: string, subscriber: Subscriber): void => {\n    subscribers[url].delete(subscriber);\n};\n\nexport const resetSubscribers = (url?: string): void => {\n    if (url && subscribers.hasOwnProperty(url)) {\n        delete subscribers[url];\n    } else {\n        for (let url in subscribers){\n            if (subscribers.hasOwnProperty(url)){\n                delete subscribers[url];\n            }\n        }\n    }\n}\n", "import { WebSocketLike } from './types';\nimport { resetWebSockets } from './globals';\nimport { resetSubscribers } from './manage-subscribers';\n\nexport function assertIsWebSocket (\n    webSocketInstance: WebSocketLike,\n): asserts webSocketInstance is WebSocket {\n    if (webSocketInstance instanceof WebSocket === false) throw new Error('');\n};\n\n\nexport function resetGlobalState (url?: string): void {\n    resetSubscribers(url);\n    resetWebSockets(url);\n};\n", "import { MutableRefObject } from 'react';\nimport { setUpSocketIOPing } from './socket-io';\nimport {\n  DEFAULT_RECONNECT_LIMIT,\n  DEFAULT_RECONNECT_INTERVAL_MS,\n  ReadyState,\n  isEventSourceSupported,\n} from './constants';\nimport { Options, SendMessage, WebSocketLike } from './types';\nimport { assertIsWebSocket } from './util';\n\nexport interface Setters {\n  setLastMessage: (message: WebSocketEventMap['message']) => void;\n  setReadyState: (readyState: ReadyState) => void;\n}\n\nconst bindMessageHandler = (\n  webSocketInstance: WebSocketLike,\n  optionsRef: MutableRefObject<Options>,\n  setLastMessage: Setters['setLastMessage'],\n) => {\n  webSocketInstance.onmessage = (message: WebSocketEventMap['message']) => {\n    optionsRef.current.onMessage && optionsRef.current.onMessage(message);\n    if (typeof optionsRef.current.filter === 'function' && optionsRef.current.filter(message) !== true) {\n      return;\n    }\n    setLastMessage(message);\n  };\n};\n\nconst bindOpenHandler = (\n  webSocketInstance: WebSocketLike,\n  optionsRef: MutableRefObject<Options>,\n  setReadyState: Setters['setReadyState'],\n  reconnectCount: MutableRefObject<number>,\n) => {\n  webSocketInstance.onopen = (event: WebSocketEventMap['open']) => {\n    optionsRef.current.onOpen && optionsRef.current.onOpen(event);\n    reconnectCount.current = 0;\n    setReadyState(ReadyState.OPEN);\n  };\n};\n\nconst bindCloseHandler = (\n  webSocketInstance: WebSocketLike,\n  optionsRef: MutableRefObject<Options>,\n  setReadyState: Setters['setReadyState'],\n  reconnect: () => void,\n  reconnectCount: MutableRefObject<number>,\n) => {\n  if (isEventSourceSupported && webSocketInstance instanceof EventSource) {\n    return () => {};\n  }\n  assertIsWebSocket(webSocketInstance);\n  let reconnectTimeout: number;\n\n  webSocketInstance.onclose = (event: WebSocketEventMap['close']) => {\n    optionsRef.current.onClose && optionsRef.current.onClose(event);\n    setReadyState(ReadyState.CLOSED);\n    if (optionsRef.current.shouldReconnect && optionsRef.current.shouldReconnect(event)) {\n      const reconnectAttempts = optionsRef.current.reconnectAttempts ?? DEFAULT_RECONNECT_LIMIT;\n      if (reconnectCount.current < reconnectAttempts) {\n        reconnectTimeout = window.setTimeout(() => {\n          reconnectCount.current++;\n          reconnect();\n        }, optionsRef.current.reconnectInterval ?? DEFAULT_RECONNECT_INTERVAL_MS);\n      } else {\n        optionsRef.current.onReconnectStop && optionsRef.current.onReconnectStop(reconnectAttempts);\n        console.warn(`Max reconnect attempts of ${reconnectAttempts} exceeded`);\n      }\n    }\n  };\n\n  return () => reconnectTimeout && window.clearTimeout(reconnectTimeout);\n};\n\nconst bindErrorHandler = (\n  webSocketInstance: WebSocketLike,\n  optionsRef: MutableRefObject<Options>,\n  setReadyState: Setters['setReadyState'],\n  reconnect: () => void,\n  reconnectCount: MutableRefObject<number>,\n) => {\n  let reconnectTimeout: number;\n\n  webSocketInstance.onerror = (error: WebSocketEventMap['error']) => {\n    optionsRef.current.onError && optionsRef.current.onError(error);\n    if (isEventSourceSupported && webSocketInstance instanceof EventSource) {\n      optionsRef.current.onClose && optionsRef.current.onClose({\n        ...error,\n        code: 1006,\n        reason: `An error occurred with the EventSource: ${error}`,\n        wasClean: false,\n      });\n\n      setReadyState(ReadyState.CLOSED);\n      webSocketInstance.close();\n    }\n    \n    if (optionsRef.current.retryOnError) {\n      if (reconnectCount.current < (optionsRef.current.reconnectAttempts ?? DEFAULT_RECONNECT_LIMIT)) {\n        reconnectTimeout = window.setTimeout(() => {\n          reconnectCount.current++;\n          reconnect();\n        }, optionsRef.current.reconnectInterval ?? DEFAULT_RECONNECT_INTERVAL_MS);\n      } else {\n        optionsRef.current.onReconnectStop && optionsRef.current.onReconnectStop(optionsRef.current.reconnectAttempts as number);\n        console.warn(`Max reconnect attempts of ${optionsRef.current.reconnectAttempts} exceeded`);\n      }\n    }\n  };\n\n  return () => reconnectTimeout && window.clearTimeout(reconnectTimeout);\n};\n\nexport const attachListeners = (\n    webSocketInstance: WebSocketLike,\n    setters: Setters,\n    optionsRef: MutableRefObject<Options>,\n    reconnect: () => void,\n    reconnectCount: MutableRefObject<number>,\n    sendMessage: SendMessage,\n  ): (() => void) => {\n  const { setLastMessage, setReadyState } = setters;\n\n  let interval: number;\n  let cancelReconnectOnClose: () => void;\n  let cancelReconnectOnError: () => void;\n\n  if (optionsRef.current.fromSocketIO) {\n    interval = setUpSocketIOPing(sendMessage);\n  }\n\n  bindMessageHandler(\n    webSocketInstance,\n    optionsRef,\n    setLastMessage,\n  );\n\n  bindOpenHandler(\n    webSocketInstance,\n    optionsRef,\n    setReadyState,\n    reconnectCount,\n  );\n\n  cancelReconnectOnClose = bindCloseHandler(\n    webSocketInstance,\n    optionsRef,\n    setReadyState,\n    reconnect,\n    reconnectCount,\n  );\n\n  cancelReconnectOnError = bindErrorHandler(\n    webSocketInstance,\n    optionsRef,\n    setReadyState,\n    reconnect,\n    reconnectCount,\n  );\n\n  return () => {\n    setReadyState(ReadyState.CLOSING);\n    cancelReconnectOnClose();\n    cancelReconnectOnError();\n    webSocketInstance.close();\n    if (interval) clearInterval(interval);\n  };\n};\n", "import { sharedWebSockets } from './globals';\nimport { DEFAULT_RECONNECT_LIMIT, DEFAULT_RECONNECT_INTERVAL_MS, ReadyState, isEventSourceSupported } from './constants';\nimport { getSubscribers } from './manage-subscribers';\nimport { MutableRefObject } from 'react';\nimport { Options, SendMessage, WebSocketLike } from './types';\nimport { setUpSocketIOPing } from './socket-io';\n\nconst bindMessageHandler = (\n  webSocketInstance: WebSocketLike,\n  url: string,\n) => {\n  webSocketInstance.onmessage = (message: WebSocketEventMap['message']) => {\n    getSubscribers(url).forEach(subscriber => {\n      if (subscriber.optionsRef.current.onMessage) {\n        subscriber.optionsRef.current.onMessage(message);\n      }\n\n      if (\n        typeof subscriber.optionsRef.current.filter === 'function' &&\n        subscriber.optionsRef.current.filter(message) !== true\n      ) {\n        return;\n      }\n\n      subscriber.setLastMessage(message);\n    });\n  };\n};\n\nconst bindOpenHandler = (\n  webSocketInstance: WebSocketLike,\n  url: string,\n) => {\n  webSocketInstance.onopen = (event: WebSocketEventMap['open']) => {\n    getSubscribers(url).forEach(subscriber => {\n      subscriber.reconnectCount.current = 0;\n      if (subscriber.optionsRef.current.onOpen) {\n        subscriber.optionsRef.current.onOpen(event);\n      }\n\n      subscriber.setReadyState(ReadyState.OPEN);\n    });\n  };\n};\n\nconst bindCloseHandler = (\n  webSocketInstance: WebSocketLike,\n  url: string,\n) => {\n  if (webSocketInstance instanceof WebSocket) {\n    webSocketInstance.onclose = (event: WebSocketEventMap['close']) => {\n      getSubscribers(url).forEach(subscriber => {\n        if (subscriber.optionsRef.current.onClose) {\n          subscriber.optionsRef.current.onClose(event);\n        }\n  \n        subscriber.setReadyState(ReadyState.CLOSED);\n      });\n      \n      delete sharedWebSockets[url];\n  \n      getSubscribers(url).forEach(subscriber => {\n        if (\n          subscriber.optionsRef.current.shouldReconnect &&\n          subscriber.optionsRef.current.shouldReconnect(event)\n        ) {\n          const reconnectAttempts = subscriber.optionsRef.current.reconnectAttempts ?? DEFAULT_RECONNECT_LIMIT;\n          if (subscriber.reconnectCount.current < reconnectAttempts) {\n            setTimeout(() => {\n              subscriber.reconnectCount.current++;\n              subscriber.reconnect.current();\n            }, subscriber.optionsRef.current.reconnectInterval ?? DEFAULT_RECONNECT_INTERVAL_MS);\n          } else {\n            subscriber.optionsRef.current.onReconnectStop && subscriber.optionsRef.current.onReconnectStop(subscriber.optionsRef.current.reconnectAttempts as number);\n            console.warn(`Max reconnect attempts of ${reconnectAttempts} exceeded`);\n          }\n        }\n      });\n    };\n  }\n};\n\nconst bindErrorHandler = (\n  webSocketInstance: WebSocketLike,\n  url: string,\n) => {\n  webSocketInstance.onerror = (error: WebSocketEventMap['error']) => {\n    getSubscribers(url).forEach(subscriber => {\n      if (subscriber.optionsRef.current.onError) {\n        subscriber.optionsRef.current.onError(error);\n      }\n      if (isEventSourceSupported && webSocketInstance instanceof EventSource) {\n        subscriber.optionsRef.current.onClose && subscriber.optionsRef.current.onClose({\n          ...error,\n          code: 1006,\n          reason: `An error occurred with the EventSource: ${error}`,\n          wasClean: false,\n        });\n  \n        subscriber.setReadyState(ReadyState.CLOSED);\n      }\n    });\n    if (isEventSourceSupported && webSocketInstance instanceof EventSource) {\n      webSocketInstance.close();\n    }\n  };\n};\n\nexport const attachSharedListeners = (\n  webSocketInstance: WebSocketLike,\n  url: string,\n  optionsRef: MutableRefObject<Options>,\n  sendMessage: SendMessage,\n) => {\n  let interval: number;\n\n  if (optionsRef.current.fromSocketIO) {\n    interval = setUpSocketIOPing(sendMessage);\n  }\n\n  bindMessageHandler(webSocketInstance, url);\n  bindCloseHandler(webSocketInstance, url);\n  bindOpenHandler(webSocketInstance, url);\n  bindErrorHandler(webSocketInstance, url);\n\n  return () => {\n    if (interval) clearInterval(interval);\n  };\n};\n", "import { MutableRefObject } from 'react';\nimport { sharedWebSockets } from './globals';\nimport { Options, SendMessage, Subscriber, WebSocketLike } from './types';\nimport { isEventSourceSupported, ReadyState, isReactNative } from './constants';\nimport { attachListeners } from './attach-listener';\nimport { attachSharedListeners } from './attach-shared-listeners';\nimport { addSubscriber, removeSubscriber, hasSubscribers } from './manage-subscribers';\n\n//TODO ensure that all onClose callbacks are called\n\nconst cleanSubscribers = (\n  url: string,\n  subscriber: Subscriber,\n  optionsRef: MutableRefObject<Options>,\n  setReadyState: (readyState: ReadyState) => void,\n  clearSocketIoPingInterval: (() => void) | null,\n) => {\n  return () => {\n    removeSubscriber(url, subscriber);\n    if (!hasSubscribers(url)) {\n      try {\n        const socketLike = sharedWebSockets[url];\n        if (socketLike instanceof WebSocket) {\n          socketLike.onclose = (event: WebSocketEventMap['close']) => {\n            if (optionsRef.current.onClose) {\n              optionsRef.current.onClose(event);\n            }\n            setReadyState(ReadyState.CLOSED);\n          };\n        }\n        socketLike.close();\n      } catch (e) {\n\n      }\n      if (clearSocketIoPingInterval) clearSocketIoPingInterval();\n\n      delete sharedWebSockets[url];\n    }\n  }\n};\n\nexport const createOrJoinSocket = (\n  webSocketRef: MutableRefObject<WebSocketLike | null>,\n  url: string,\n  setReadyState: (readyState: ReadyState) => void,\n  optionsRef: MutableRefObject<Options>,\n  setLastMessage: (message: WebSocketEventMap['message']) => void,\n  startRef: MutableRefObject<() => void>,\n  reconnectCount: MutableRefObject<number>,\n  sendMessage: SendMessage,\n): (() => void) => {\n  if (!isEventSourceSupported && optionsRef.current.eventSourceOptions) {\n    if (isReactNative) {\n      throw new Error('EventSource is not supported in ReactNative');\n    } else {\n      throw new Error('EventSource is not supported');\n    }\n  }\n\n  if (optionsRef.current.share) {\n    let clearSocketIoPingInterval: ((() => void) | null) = null;\n    if (sharedWebSockets[url] === undefined) {\n      sharedWebSockets[url] = optionsRef.current.eventSourceOptions ?\n        new EventSource(url, optionsRef.current.eventSourceOptions) :\n        new WebSocket(url, optionsRef.current.protocols);\n      webSocketRef.current = sharedWebSockets[url];\n      setReadyState(ReadyState.CONNECTING);\n      clearSocketIoPingInterval = attachSharedListeners(\n        sharedWebSockets[url],\n        url,\n        optionsRef,\n        sendMessage,\n      );\n    } else {\n      webSocketRef.current = sharedWebSockets[url];\n      setReadyState(sharedWebSockets[url].readyState);\n    }\n\n    const subscriber: Subscriber = {\n      setLastMessage,\n      setReadyState,\n      optionsRef,\n      reconnectCount,\n      reconnect: startRef,\n    };\n  \n    addSubscriber(url, subscriber);\n\n    return cleanSubscribers(\n      url,\n      subscriber,\n      optionsRef,\n      setReadyState,\n      clearSocketIoPingInterval,\n    );\n  } else {\n    webSocketRef.current = optionsRef.current.eventSourceOptions ?\n      new EventSource(url, optionsRef.current.eventSourceOptions) :\n      new WebSocket(url, optionsRef.current.protocols);\n    setReadyState(ReadyState.CONNECTING);\n    if (!webSocketRef.current) {\n      throw new Error('WebSocket failed to be created');\n    }\n\n    return attachListeners(\n      webSocketRef.current,\n      {\n        setLastMessage,\n        setReadyState\n      },\n      optionsRef,\n      startRef.current,\n      reconnectCount,\n      sendMessage,\n    );\n  }\n};\n", "import { MutableRefObject } from 'react';\nimport { parseSocketIOUrl, appendQueryParams } from './socket-io';\nimport { Options } from './types';\n\nexport const getUrl = async (\n  url: string | (() => string | Promise<string>),\n  optionsRef: MutableRefObject<Options>,\n) => {\n  let convertedUrl: string;\n\n  if (typeof url === 'function') {\n    convertedUrl = await url();\n  } else {\n    convertedUrl = url;\n  }\n\n  const parsedUrl = optionsRef.current.fromSocketIO ?\n    parseSocketIOUrl(convertedUrl) :\n    convertedUrl;\n\n  const parsedWithQueryParams = optionsRef.current.queryParams ?\n    appendQueryParams(\n      parsedUrl,\n      optionsRef.current.queryParams\n    ) :\n    parsedUrl;\n\n  return parsedWithQueryParams;\n};\n", "import { MutableRefObject } from 'react';\n\ntype IfEquals<X, Y, A=X, B=never> =\n  (<T>() => T extends X ? 1 : 2) extends\n  (<T>() => T extends Y ? 1 : 2) ? A : B;\n\ntype WritableKeys<T> = {\n  [P in keyof T]-?: IfEquals<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, P>\n}[keyof T];\n\nexport const websocketWrapper = (\n  webSocket: WebSocket,\n  start: MutableRefObject<() => void>,\n): WebSocket => {\n\n  return new Proxy<WebSocket>(webSocket, {\n    get: (obj, key: keyof WebSocket) => {\n      const val = obj[key];\n      if ((key as any) === 'reconnect') return start;\n      if (typeof val === 'function') {\n        console.error('Calling methods directly on the websocket is not supported at this moment. You must use the methods returned by useWebSocket.');\n        \n        //Prevent error thrown by invoking a non-function\n        return () => {};\n      } else {\n        return val;\n      }\n    },\n    set: (obj: WebSocket, key:WritableKeys<WebSocket>, val: any) => {\n      if (/^on/.test(key)) {\n        console.warn('The websocket\\'s event handlers should be defined through the options object passed into useWebSocket.')\n        return false;\n      } else {\n        obj[key] = val;\n        return true;\n      }\n    },\n  });\n};\n\nexport default websocketWrapper;\n", "import { useEffect, useRef, useState, useCallback, useMemo } from 'react';\nimport { DEFAULT_OPTIONS, isEventSourceSupported, ReadyState, UNPARSABLE_JSON_OBJECT } from './constants';\nimport { createOrJoinSocket } from './create-or-join';\nimport { getUrl } from './get-url';\nimport websocketWrapper from './proxy';\nimport {\n  Options,\n  ReadyStateState,\n  SendMessage,\n  SendJsonMessage,\n  WebSocketMessage,\n  WebSocketHook,\n  WebSocketLike,\n} from './types';\nimport { assertIsWebSocket } from './util';\n\nexport const useWebSocket = (\n  url: string | (() => string | Promise<string>) | null,\n  options: Options = DEFAULT_OPTIONS,\n  connect: boolean = true,\n): WebSocketHook => {\n  const [lastMessage, setLastMessage] = useState<WebSocketEventMap['message'] | null>(null);\n  const [readyState, setReadyState] = useState<ReadyStateState>({});\n  const lastJsonMessage = useMemo(() => {\n    if (lastMessage) {\n      try {\n        return JSON.parse(lastMessage.data);\n      } catch (e) {\n        return UNPARSABLE_JSON_OBJECT;\n      }\n    }\n    return null;\n  },[lastMessage]);\n  const convertedUrl = useRef<string | null>(null);\n  const webSocketRef = useRef<WebSocketLike | null>(null);\n  const startRef = useRef<() => void>(() => void 0);\n  const reconnectCount = useRef<number>(0);\n  const messageQueue = useRef<WebSocketMessage[]>([]);\n  const webSocketProxy = useRef<WebSocketLike | null>(null);\n  const optionsCache = useRef<Options>(options);\n  optionsCache.current = options;\n\n  const readyStateFromUrl: ReadyState =\n    convertedUrl.current && readyState[convertedUrl.current] !== undefined ?\n      readyState[convertedUrl.current] :\n      url !== null && connect === true ?\n        ReadyState.CONNECTING :\n        ReadyState.UNINSTANTIATED;\n\n  const stringifiedQueryParams = options.queryParams ? JSON.stringify(options.queryParams) : null;\n\n  const sendMessage: SendMessage = useCallback((message, keep = true) => {\n    if (isEventSourceSupported && webSocketRef.current instanceof EventSource) {\n      console.warn('Unable to send a message from an eventSource');\n      return;\n    }\n  \n    if (webSocketRef.current?.readyState === ReadyState.OPEN) {\n      assertIsWebSocket(webSocketRef.current);\n      webSocketRef.current.send(message);\n    } else if (keep) {\n      messageQueue.current.push(message);\n    }\n  }, []);\n\n  const sendJsonMessage: SendJsonMessage = useCallback((message, keep = true) => {\n    sendMessage(JSON.stringify(message), keep);\n  }, [sendMessage]);\n  \n  const getWebSocket = useCallback(() => {\n    if (optionsCache.current.share !== true || (isEventSourceSupported && webSocketRef.current instanceof EventSource)) {\n      return webSocketRef.current;\n    }\n\n    if (webSocketProxy.current === null && webSocketRef.current) {\n      assertIsWebSocket(webSocketRef.current);\n      webSocketProxy.current = websocketWrapper(webSocketRef.current, startRef);\n    }\n\n    return webSocketProxy.current;\n  }, []);\n\n  useEffect(() => {\n    if (url !== null && connect === true) {\n      let removeListeners: () => void;\n      let expectClose = false;\n\n      const start = async () => {\n        convertedUrl.current = await getUrl(url, optionsCache);\n\n        const protectedSetLastMessage = (message: WebSocketEventMap['message']) => {\n          if (!expectClose) {\n            setLastMessage(message);\n          }\n        };\n  \n        const protectedSetReadyState = (state: ReadyState) => {\n          if (!expectClose) {\n            setReadyState(prev => ({\n              ...prev,\n              ...(convertedUrl.current && {[convertedUrl.current]: state}),\n            }));\n          }\n        };\n\n        removeListeners = createOrJoinSocket(\n          webSocketRef,\n          convertedUrl.current,\n          protectedSetReadyState,\n          optionsCache,\n          protectedSetLastMessage,\n          startRef,\n          reconnectCount,\n          sendMessage,\n        );\n      };\n\n      startRef.current = () => {\n        if (!expectClose) {\n          if (webSocketProxy.current) webSocketProxy.current = null;\n          removeListeners?.();\n          start();\n        }\n      };\n    \n      start();\n      return () => {\n        expectClose = true;\n        if (webSocketProxy.current) webSocketProxy.current = null;\n        removeListeners?.();\n        setLastMessage(null);\n      };\n    } else if (url === null || connect === false) {\n      reconnectCount.current = 0; // reset reconnection attempts\n      setReadyState(prev => ({\n        ...prev,\n        ...(convertedUrl.current && {[convertedUrl.current]: ReadyState.CLOSED}),\n      }));\n    }\n  }, [url, connect, stringifiedQueryParams, sendMessage]);\n\n  useEffect(() => {\n    if (readyStateFromUrl === ReadyState.OPEN) {\n      messageQueue.current.splice(0).forEach(message => {\n        sendMessage(message);\n      });\n    }\n  }, [readyStateFromUrl]);\n\n  return {\n    sendMessage,\n    sendJsonMessage,\n    lastMessage,\n    lastJsonMessage,\n    readyState: readyStateFromUrl,\n    getWebSocket,\n  };\n};\n", "import { useMemo } from 'react'\nimport { useWebSocket } from './use-websocket'\nimport { DEFAULT_OPTIONS } from './constants'\nimport { Options, WebSocketHook } from './types';\n\nexport interface SocketIOMessageData {\n  type: string,\n  payload: any,\n}\n\nconst emptyEvent: SocketIOMessageData = {\n  type: 'empty',\n  payload: null,\n}\n\nconst getSocketData = (event: WebSocketEventMap['message'] | null): SocketIOMessageData => {\n  if (!event || !event.data) {\n    return emptyEvent\n  }\n\n  const match = event.data.match(/\\[.*]/)\n\n  if (!match) {\n    return emptyEvent\n  }\n\n  const data = JSON.parse(match)\n\n  if (!Array.isArray(data) || !data[1]) {\n    return emptyEvent\n  }\n\n  return {\n    type: data[0],\n    payload: data[1],\n  }\n}\n\nexport const useSocketIO = (\n  url: string | (() => string | Promise<string>) | null,\n  options: Options = DEFAULT_OPTIONS,\n  connect: boolean = true,\n): WebSocketHook<SocketIOMessageData> => {\n  const optionsWithSocketIO = useMemo(() => ({\n    ...options,\n    fromSocketIO: true,\n  }), [])\n\n  const {\n    sendMessage,\n    sendJsonMessage,\n    lastMessage,\n    readyState,\n    getWebSocket,\n  } = useWebSocket(\n\n    url,\n    optionsWithSocketIO,\n    connect,\n  );\n\n  const socketIOLastMessage = useMemo(() =>\n    getSocketData(lastMessage), [lastMessage]);\n\n  return {\n    sendMessage,\n    sendJsonMessage,\n    lastMessage: socketIOLastMessage,\n    lastJsonMessage: socketIOLastMessage,\n    readyState,\n    getWebSocket,\n  };\n}\n", "import { useEffect, useRef } from 'react'\nimport { useWebSocket } from './use-websocket'\nimport { DEFAULT_EVENT_SOURCE_OPTIONS, EMPTY_EVENT_HANDLERS } from './constants'\nimport { EventSourceOptions, Options, EventSourceHook, EventSourceEventHandlers } from './types';\n\nexport const useEventSource = (\n  url: string | (() => string | Promise<string>) | null,\n  { withCredentials, events, ...options }: EventSourceOptions = DEFAULT_EVENT_SOURCE_OPTIONS,\n  connect: boolean = true,\n): EventSourceHook => {\n  const optionsWithEventSource: Options = {\n      ...options,\n      eventSourceOptions: {\n        withCredentials,\n      }\n  };\n  const eventsRef = useRef<EventSourceEventHandlers>(EMPTY_EVENT_HANDLERS);\n  if (events) {\n    eventsRef.current = events\n  }\n\n  const {\n    lastMessage,\n    readyState,\n    getWebSocket,\n  } = useWebSocket(\n    url,\n    optionsWithEventSource,\n    connect,\n  );\n\n  useEffect(() => {\n    if (lastMessage?.type) {\n        Object.entries(eventsRef.current).forEach(([type, handler]) => {\n            if (type === lastMessage.type) {\n                handler(lastMessage);\n            }\n        });\n    }\n  }, [lastMessage]);\n\n  return {\n    lastEvent: lastMessage,\n    readyState,\n    getEventSource: getWebSocket,\n  };\n}\n", "export { useWebSocket as default } from './lib/use-websocket';\n\nexport { SendMessage, Options } from './lib/types';\n\nexport { useSocketIO } from './lib/use-socket-io';\n\nexport { ReadyState } from './lib/constants';\n\nexport { useEventSource } from './lib/use-event-source';\n\nexport { resetGlobalState } from './lib/util';\n"],
  "mappings": "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",
  "names": ["ReadyState", "_a", "_b", "_a"]
}
